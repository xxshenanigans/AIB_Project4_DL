{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "project4_model.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xxshenanigans/AIB_Project4_DL/blob/main/%EC%BD%94%EB%93%9C%20%ED%8C%8C%EC%9D%BC\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vGQQeS76SFVu"
      },
      "source": [
        "#Handwriting Recognition using CRNN in Keras#"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "07LmIrXR0bCv"
      },
      "source": [
        "[reference]\n",
        "- https://github.com/parkskwan/ocr_img \n",
        "- https://lapina.tistory.com/83\n",
        "- https://www.kaggle.com/samfc10/handwriting-recognition-using-crnn-in-keras"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GGsv91zXEDRI"
      },
      "source": [
        "문자인식(Character Recognition)이란 시각 정보를 통하여 문자를 인식하고 의미를 이해하는 인간의 능력을 컴퓨터로 실현하려는 패턴인식(Pattern Recognition)의 한 분야로서, *광학 문자 인식(Optical Character Recognition), 우편물 자동 분류, 문서인식, 도면인식 등의 분야에서 부분적으로 실용화가 이루어지게 되었으며, 요즈음에는 인공지능(Artificial Intelligence)의 최신기법인 신경망(Neural Network)과 접목에 의해 문자인식 기술은 새로운 단계에 접어들게 되었습니다. <br/>\n",
        "이번 프로젝트에서는 손글씨 문자 이미지에 대하여 학습 데이터셋으로 CRNN(CNN+RNN) 모델을 학습하고, 테스트 데이터셋으로부터 문자를 인식하도록 합니다. 이후 이와 유사한 문자 이미지를 출력해 보고자 합니다.  \n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xUFDXyCInXP0"
      },
      "source": [
        "## Importing Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y8kUATrcrTWT",
        "outputId": "dda4334f-9eae-4669-cd39-69d86e2e8f2d"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PaNYdwL9STfK"
      },
      "source": [
        "import random\n",
        "import pandas as pd\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import tensorflow as tf\n",
        "from keras import backend as K\n",
        "from keras.models import Model\n",
        "from keras.layers import Input, Conv2D, Reshape, Bidirectional, LSTM, Dense, Lambda, BatchNormalization"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fsyjLVu6SSqI"
      },
      "source": [
        "## Loading Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jcHsfVCqSrwr"
      },
      "source": [
        "train = pd.read_csv('/content/drive/MyDrive/input/written_name_train_v2.csv')\n",
        "valid = pd.read_csv('/content/drive/MyDrive/input/written_name_validation_v2.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "Jt7geiTvuGDy",
        "outputId": "4f77a97e-fb5f-4f59-98e5-19c7b1778ddb"
      },
      "source": [
        "train = train.head(33001)\n",
        "train"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FILENAME</th>\n",
              "      <th>IDENTITY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TRAIN_00001.jpg</td>\n",
              "      <td>BALTHAZAR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TRAIN_00002.jpg</td>\n",
              "      <td>SIMON</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TRAIN_00003.jpg</td>\n",
              "      <td>BENES</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TRAIN_00004.jpg</td>\n",
              "      <td>LA LOVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TRAIN_00005.jpg</td>\n",
              "      <td>DAPHNE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32996</th>\n",
              "      <td>TRAIN_32997.jpg</td>\n",
              "      <td>LEANE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32997</th>\n",
              "      <td>TRAIN_32998.jpg</td>\n",
              "      <td>DEBONNE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32998</th>\n",
              "      <td>TRAIN_32999.jpg</td>\n",
              "      <td>PAUL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32999</th>\n",
              "      <td>TRAIN_33000.jpg</td>\n",
              "      <td>LOPA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33000</th>\n",
              "      <td>TRAIN_33001.jpg</td>\n",
              "      <td>PETIT</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>33001 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "              FILENAME   IDENTITY\n",
              "0      TRAIN_00001.jpg  BALTHAZAR\n",
              "1      TRAIN_00002.jpg      SIMON\n",
              "2      TRAIN_00003.jpg      BENES\n",
              "3      TRAIN_00004.jpg    LA LOVE\n",
              "4      TRAIN_00005.jpg     DAPHNE\n",
              "...                ...        ...\n",
              "32996  TRAIN_32997.jpg      LEANE\n",
              "32997  TRAIN_32998.jpg    DEBONNE\n",
              "32998  TRAIN_32999.jpg       PAUL\n",
              "32999  TRAIN_33000.jpg       LOPA\n",
              "33000  TRAIN_33001.jpg      PETIT\n",
              "\n",
              "[33001 rows x 2 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "QwTRSKILuWfp",
        "outputId": "1fc56b58-0164-4fdf-f440-bdec20d0253f"
      },
      "source": [
        "# valid = valid.drop(valid.index[4201:])\n",
        "valid = valid.head(4201)\n",
        "valid"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FILENAME</th>\n",
              "      <th>IDENTITY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>VALIDATION_0001.jpg</td>\n",
              "      <td>BILEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>VALIDATION_0002.jpg</td>\n",
              "      <td>LAUMIONIER</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>VALIDATION_0003.jpg</td>\n",
              "      <td>LEA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>VALIDATION_0004.jpg</td>\n",
              "      <td>JEAN-ROCH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>VALIDATION_0005.jpg</td>\n",
              "      <td>RUPP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4196</th>\n",
              "      <td>VALIDATION_4197.jpg</td>\n",
              "      <td>JULIEN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4197</th>\n",
              "      <td>VALIDATION_4198.jpg</td>\n",
              "      <td>LE PENNEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4198</th>\n",
              "      <td>VALIDATION_4199.jpg</td>\n",
              "      <td>THIBAULT</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4199</th>\n",
              "      <td>VALIDATION_4200.jpg</td>\n",
              "      <td>MOREAU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4200</th>\n",
              "      <td>VALIDATION_4201.jpg</td>\n",
              "      <td>PLANCHON</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4201 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                 FILENAME    IDENTITY\n",
              "0     VALIDATION_0001.jpg       BILEL\n",
              "1     VALIDATION_0002.jpg  LAUMIONIER\n",
              "2     VALIDATION_0003.jpg         LEA\n",
              "3     VALIDATION_0004.jpg   JEAN-ROCH\n",
              "4     VALIDATION_0005.jpg        RUPP\n",
              "...                   ...         ...\n",
              "4196  VALIDATION_4197.jpg      JULIEN\n",
              "4197  VALIDATION_4198.jpg   LE PENNEL\n",
              "4198  VALIDATION_4199.jpg    THIBAULT\n",
              "4199  VALIDATION_4200.jpg      MOREAU\n",
              "4200  VALIDATION_4201.jpg    PLANCHON\n",
              "\n",
              "[4201 rows x 2 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CbY5nx4aSv1C",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "53089481-7fae-4680-e8b3-89ff3bf3e5a9"
      },
      "source": [
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "for i in range(6):\n",
        "    ax = plt.subplot(2, 3, i+1)\n",
        "    img_dir = '/content/drive/MyDrive/input/train/'+train.loc[i, 'FILENAME']\n",
        "    image = cv2.imread(img_dir, cv2.IMREAD_GRAYSCALE)\n",
        "    plt.imshow(image, cmap = 'gray')\n",
        "    plt.title(train.loc[i, 'IDENTITY'], fontsize=12)\n",
        "    plt.axis('off')\n",
        "\n",
        "plt.subplots_adjust(wspace=0.2, hspace=-0.8)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 6 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mwId6absWUJw"
      },
      "source": [
        "##Cleaning Data##"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AVZfRM1kWeWf"
      },
      "source": [
        "Label(IDENTITY)이 결측치인 이미지를 제거합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QsjGHOBdu6Tc",
        "outputId": "218e47ae-2ca0-4393-a9e0-3b8b38ef1285"
      },
      "source": [
        "train['IDENTITY'].isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "56"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rb09f321u87s",
        "outputId": "6e347470-fa39-4f8b-aeba-a91dfc163182"
      },
      "source": [
        "valid['IDENTITY'].isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BTU8uIjQWh4P"
      },
      "source": [
        "train.dropna(axis=0, inplace=True)\n",
        "valid.dropna(axis=0, inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yiKE1OsxWluv"
      },
      "source": [
        "Label이 'UNREADABLE'인 이미지를 제거합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F4vzsagGWjSI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "outputId": "fd27a95c-c2fc-4cf7-b7b4-44edc0e0d573"
      },
      "source": [
        "unreadable = train[train['IDENTITY'] == 'UNREADABLE']\n",
        "unreadable.reset_index(inplace = True, drop=True)\n",
        "\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "for i in range(6):\n",
        "    ax = plt.subplot(2, 3, i+1)\n",
        "    img_dir = '/content/drive/MyDrive/input/train/'+unreadable.loc[i, 'FILENAME']\n",
        "    image = cv2.imread(img_dir, cv2.IMREAD_GRAYSCALE)\n",
        "    plt.imshow(image, cmap = 'gray')\n",
        "    plt.title(unreadable.loc[i, 'IDENTITY'], fontsize=12)\n",
        "    plt.axis('off')\n",
        "\n",
        "plt.subplots_adjust(wspace=0.2, hspace=-0.8)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 6 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hr4XJ8tZWrRT"
      },
      "source": [
        "train = train[train['IDENTITY'] != 'UNREADABLE']\n",
        "valid = valid[valid['IDENTITY'] != 'UNREADABLE']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eSWZADZqWtf7"
      },
      "source": [
        "Label을 모두 대문자로 변환합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zGgpJ0jhWt9F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2dbb577f-1599-4a6e-b16a-92a7f6d6ede0"
      },
      "source": [
        "train['IDENTITY'] = train['IDENTITY'].str.upper()\n",
        "valid['IDENTITY'] = valid['IDENTITY'].str.upper()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8CQ0QTRhWxMU"
      },
      "source": [
        "Index를 재설정(Reset) 합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tL9P1sTuWvoH"
      },
      "source": [
        "train.reset_index(inplace = True, drop=True) \n",
        "valid.reset_index(inplace = True, drop=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "p0BLFKf4vlrR",
        "outputId": "c42526fd-89bd-473c-80e2-f7e743889445"
      },
      "source": [
        "print(train.shape)\n",
        "train.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(32934, 2)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FILENAME</th>\n",
              "      <th>IDENTITY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TRAIN_00001.jpg</td>\n",
              "      <td>BALTHAZAR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TRAIN_00002.jpg</td>\n",
              "      <td>SIMON</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TRAIN_00003.jpg</td>\n",
              "      <td>BENES</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TRAIN_00004.jpg</td>\n",
              "      <td>LA LOVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TRAIN_00005.jpg</td>\n",
              "      <td>DAPHNE</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          FILENAME   IDENTITY\n",
              "0  TRAIN_00001.jpg  BALTHAZAR\n",
              "1  TRAIN_00002.jpg      SIMON\n",
              "2  TRAIN_00003.jpg      BENES\n",
              "3  TRAIN_00004.jpg    LA LOVE\n",
              "4  TRAIN_00005.jpg     DAPHNE"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "am5qbAFQvrys",
        "outputId": "2d22f8ca-df2c-4d75-f251-ecdfb50c60f3"
      },
      "source": [
        "print(valid.shape)\n",
        "valid.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(4189, 2)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FILENAME</th>\n",
              "      <th>IDENTITY</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>VALIDATION_0001.jpg</td>\n",
              "      <td>BILEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>VALIDATION_0002.jpg</td>\n",
              "      <td>LAUMIONIER</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>VALIDATION_0003.jpg</td>\n",
              "      <td>LEA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>VALIDATION_0004.jpg</td>\n",
              "      <td>JEAN-ROCH</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>VALIDATION_0005.jpg</td>\n",
              "      <td>RUPP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              FILENAME    IDENTITY\n",
              "0  VALIDATION_0001.jpg       BILEL\n",
              "1  VALIDATION_0002.jpg  LAUMIONIER\n",
              "2  VALIDATION_0003.jpg         LEA\n",
              "3  VALIDATION_0004.jpg   JEAN-ROCH\n",
              "4  VALIDATION_0005.jpg        RUPP"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4YOgSRlpW0YY"
      },
      "source": [
        "##Preprocessing and Preparing the Images for Training##"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dV-jl1yDW1E7"
      },
      "source": [
        "- 이미지는 흑백 및 가로 256, 세로 64로 설정합니다. \n",
        "- 만약 크기가 크면 256*64 크기로 잘라내고, 작으면 white pixel로 padding 합니다. 이미지를 (x, y) 모양으로 가져오기 위하여 시계 방향으로 돌립니다. \n",
        "- 이미지는 [0, 1] 범위로 정규화합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "daRrGCuRb5r-"
      },
      "source": [
        "def preprocess(img):\n",
        "    (h, w) = img.shape\n",
        "    \n",
        "    final_img = np.ones([64, 256])*255 # blank white image\n",
        "    \n",
        "    # crop\n",
        "    if w > 256:\n",
        "        img = img[:, :256]\n",
        "        \n",
        "    if h > 64:\n",
        "        img = img[:64, :]\n",
        "    \n",
        "    \n",
        "    final_img[:h, :w] = img\n",
        "    return cv2.rotate(final_img, cv2.ROTATE_90_CLOCKWISE)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4y31KrxwcC82"
      },
      "source": [
        "Training Dataset은 8000개, Validation Dataset은 1000개입니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l6XNFTvkb-Vd"
      },
      "source": [
        "train_size = 8000\n",
        "valid_size= 1000 "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rupAWuLPwEx5",
        "outputId": "179c8eff-79a2-4d33-cb0d-be603ce7e873"
      },
      "source": [
        "train_size, valid_size"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8000, 1000)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yrqbTmDEcGBK"
      },
      "source": [
        "train_x = []\n",
        "\n",
        "for i in range(train_size):\n",
        "    img_dir = '/content/drive/MyDrive/input/train/'+train.loc[i, 'FILENAME']\n",
        "    image = cv2.imread(img_dir, cv2.IMREAD_GRAYSCALE)\n",
        "    image = preprocess(image)\n",
        "    image = image/255.\n",
        "    train_x.append(image)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cwf1fHVxccKD"
      },
      "source": [
        "valid_x = []\n",
        "\n",
        "for i in range(valid_size):\n",
        "    img_dir = '/content/drive/MyDrive/input/validation/'+valid.loc[i, 'FILENAME']\n",
        "    image = cv2.imread(img_dir, cv2.IMREAD_GRAYSCALE)\n",
        "    image = preprocess(image)\n",
        "    image = image/255.\n",
        "    valid_x.append(image)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s8QYVI5ochBX"
      },
      "source": [
        "train_x = np.array(train_x).reshape(-1, 256, 64, 1)\n",
        "valid_x = np.array(valid_x).reshape(-1, 256, 64, 1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A4MvoYsMciu2"
      },
      "source": [
        "##Preparing the Labels for CTC Loss##"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u2FurT60cl0P"
      },
      "source": [
        "Label은 각 문자를 나타내는 숫자로 변환합니다. <br/> \n",
        "문자는 알파벳 A-Z와 세 특수문자(-, ', space)로 이루어져 있습니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VCHOkgX3cr8P"
      },
      "source": [
        "alphabets = u\"ABCDEFGHIJKLMNOPQRSTUVWXYZ-' \"\n",
        "max_str_len = 24   # max length of input labels\n",
        "num_of_characters = len(alphabets) + 1   # +1 for ctc pseudo blank\n",
        "num_of_timestamps = 64   # max length of predicted labels\n",
        "\n",
        "\n",
        "def label_to_num(label):\n",
        "    label_num = []\n",
        "    for ch in label:\n",
        "        label_num.append(alphabets.find(ch))\n",
        "        \n",
        "    return np.array(label_num)\n",
        "\n",
        "def num_to_label(num):\n",
        "    ret = \"\"\n",
        "    for ch in num:\n",
        "        if ch == -1:   # CTC Blank\n",
        "            break\n",
        "        else:\n",
        "            ret+=alphabets[ch]\n",
        "    return ret"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tJQlGiTFcthd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30518ad4-ee73-412b-adfa-48182e64ed38"
      },
      "source": [
        "name = 'JIHYE'\n",
        "print(name, '\\n',label_to_num(name))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "JIHYE \n",
            " [ 9  8  7 24  4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zh3EUu42dNFh"
      },
      "source": [
        "- **train_y** : 라벨을 숫자로 변환하고 길이가 max_str_len와 같도록 -1로 패딩하였습니다.\n",
        "- **train_label_len** : 패딩하지 않았을 때의 라벨 길이입니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vz1vQ4wedKfm"
      },
      "source": [
        "train_y = np.ones([train_size, max_str_len]) * -1\n",
        "train_label_len = np.zeros([train_size, 1])\n",
        "train_input_len = np.ones([train_size, 1]) * (num_of_timestamps-2)\n",
        "train_output = np.zeros([train_size])\n",
        "\n",
        "for i in range(train_size):\n",
        "    train_label_len[i] = len(train.loc[i, 'IDENTITY'])\n",
        "    train_y[i, 0:len(train.loc[i, 'IDENTITY'])]= label_to_num(train.loc[i, 'IDENTITY'])    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XdfHRuRHdkw6"
      },
      "source": [
        "valid_y = np.ones([valid_size, max_str_len]) * -1\n",
        "valid_label_len = np.zeros([valid_size, 1])\n",
        "valid_input_len = np.ones([valid_size, 1]) * (num_of_timestamps-2)\n",
        "valid_output = np.zeros([valid_size])\n",
        "\n",
        "for i in range(valid_size):\n",
        "    valid_label_len[i] = len(valid.loc[i, 'IDENTITY'])\n",
        "    valid_y[i, 0:len(valid.loc[i, 'IDENTITY'])]= label_to_num(valid.loc[i, 'IDENTITY'])    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XyK3r5-qdqNS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5829d32e-a84d-406a-def7-e07a3de0fb21"
      },
      "source": [
        "print('True label : ', train.loc[100, 'IDENTITY'] , '\\n train_y : ', train_y[100], '\\n train_label_len : ', train_label_len[100], \n",
        "      '\\n train_input_len : ', train_input_len[100])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True label :  NOUR \n",
            " train_y :  [13. 14. 20. 17. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1. -1.\n",
            " -1. -1. -1. -1. -1. -1.] \n",
            " train_label_len :  [4.] \n",
            " train_input_len :  [62.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0RHniKTxdr4Z"
      },
      "source": [
        "##Building Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lv1DE7ixdsqT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f58482bf-1197-4f3f-a405-7e1a2d79ea89"
      },
      "source": [
        "input_data = Input(shape=(256, 64, 1), name='input')\n",
        "\n",
        "inner = Conv2D(32, (3, 3), padding='same', name='conv1', kernel_initializer='he_normal')(input_data)  \n",
        "inner = BatchNormalization()(inner)\n",
        "inner = Activation('relu')(inner)\n",
        "inner = MaxPooling2D(pool_size=(2, 2), name='max1')(inner)\n",
        "\n",
        "inner = Conv2D(64, (3, 3), padding='same', name='conv2', kernel_initializer='he_normal')(inner)\n",
        "inner = BatchNormalization()(inner)\n",
        "inner = Activation('relu')(inner)\n",
        "inner = MaxPooling2D(pool_size=(2, 2), name='max2')(inner)\n",
        "inner = Dropout(0.3)(inner)\n",
        "\n",
        "inner = Conv2D(128, (3, 3), padding='same', name='conv3', kernel_initializer='he_normal')(inner)\n",
        "inner = BatchNormalization()(inner)\n",
        "inner = Activation('relu')(inner)\n",
        "inner = MaxPooling2D(pool_size=(1, 2), name='max3')(inner)\n",
        "inner = Dropout(0.3)(inner)\n",
        "\n",
        "# CNN to RNN\n",
        "inner = Reshape(target_shape=((64, 1024)), name='reshape')(inner)\n",
        "inner = Dense(64, activation='relu', kernel_initializer='he_normal', name='dense1')(inner)\n",
        "\n",
        "# RNN\n",
        "inner = Bidirectional(LSTM(256, return_sequences=True), name = 'lstm1')(inner)\n",
        "inner = Bidirectional(LSTM(256, return_sequences=True), name = 'lstm2')(inner)\n",
        "\n",
        "# OUTPUT\n",
        "inner = Dense(num_of_characters, kernel_initializer='he_normal',name='dense2')(inner)\n",
        "y_pred = Activation('softmax', name='softmax')(inner)\n",
        "\n",
        "model = Model(inputs=input_data, outputs=y_pred)\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input (InputLayer)           [(None, 256, 64, 1)]      0         \n",
            "_________________________________________________________________\n",
            "conv1 (Conv2D)               (None, 256, 64, 32)       320       \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 256, 64, 32)       128       \n",
            "_________________________________________________________________\n",
            "activation (Activation)      (None, 256, 64, 32)       0         \n",
            "_________________________________________________________________\n",
            "max1 (MaxPooling2D)          (None, 128, 32, 32)       0         \n",
            "_________________________________________________________________\n",
            "conv2 (Conv2D)               (None, 128, 32, 64)       18496     \n",
            "_________________________________________________________________\n",
            "batch_normalization_1 (Batch (None, 128, 32, 64)       256       \n",
            "_________________________________________________________________\n",
            "activation_1 (Activation)    (None, 128, 32, 64)       0         \n",
            "_________________________________________________________________\n",
            "max2 (MaxPooling2D)          (None, 64, 16, 64)        0         \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 64, 16, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv3 (Conv2D)               (None, 64, 16, 128)       73856     \n",
            "_________________________________________________________________\n",
            "batch_normalization_2 (Batch (None, 64, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "activation_2 (Activation)    (None, 64, 16, 128)       0         \n",
            "_________________________________________________________________\n",
            "max3 (MaxPooling2D)          (None, 64, 8, 128)        0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 64, 8, 128)        0         \n",
            "_________________________________________________________________\n",
            "reshape (Reshape)            (None, 64, 1024)          0         \n",
            "_________________________________________________________________\n",
            "dense1 (Dense)               (None, 64, 64)            65600     \n",
            "_________________________________________________________________\n",
            "lstm1 (Bidirectional)        (None, 64, 512)           657408    \n",
            "_________________________________________________________________\n",
            "lstm2 (Bidirectional)        (None, 64, 512)           1574912   \n",
            "_________________________________________________________________\n",
            "dense2 (Dense)               (None, 64, 30)            15390     \n",
            "_________________________________________________________________\n",
            "softmax (Activation)         (None, 64, 30)            0         \n",
            "=================================================================\n",
            "Total params: 2,406,878\n",
            "Trainable params: 2,406,430\n",
            "Non-trainable params: 448\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QrWL54zud7sx"
      },
      "source": [
        "출력값의 shape은 (64, 30)입니다. 최대 64개의 철자로 이루어진 단어를 예측하고, 각 철자는 30개의 문자(알파벳과 특수기호)에 대한 확률을 예측합니다. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eD1SA7ITd4Bb"
      },
      "source": [
        "# the ctc loss function\n",
        "def ctc_lambda_func(args):\n",
        "    y_pred, labels, input_length, label_length = args\n",
        "    # the 2 is critical here since the first couple outputs of the RNN\n",
        "    # tend to be garbage\n",
        "    y_pred = y_pred[:, 2:, :]\n",
        "    return K.ctc_batch_cost(labels, y_pred, input_length, label_length)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oGRJ2BVFd_ie"
      },
      "source": [
        "labels = Input(name='gtruth_labels', shape=[max_str_len], dtype='float32')\n",
        "input_length = Input(name='input_length', shape=[1], dtype='int64')\n",
        "label_length = Input(name='label_length', shape=[1], dtype='int64')\n",
        "\n",
        "ctc_loss = Lambda(ctc_lambda_func, output_shape=(1,), name='ctc')([y_pred, labels, input_length, label_length])\n",
        "model_final = Model(inputs=[input_data, labels, input_length, label_length], outputs=ctc_loss)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z4cnZDdTeF5v"
      },
      "source": [
        "##Training Model##"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nuPQNKieeHnR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "55e16533-578b-4d1f-a1d4-2f0689f087f8"
      },
      "source": [
        "# the loss calculation occurs elsewhere, so we use a dummy lambda function for the loss\n",
        "model_final.compile(loss={'ctc': lambda y_true, y_pred: y_pred}, optimizer=Adam(lr = 0.0001))\n",
        "\n",
        "model_final.fit(x=[train_x, train_y, train_input_len, train_label_len], y=train_output, \n",
        "                validation_data=([valid_x, valid_y, valid_input_len, valid_label_len], valid_output),\n",
        "                epochs=60, batch_size=128)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/optimizer_v2.py:356: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "63/63 [==============================] - 66s 458ms/step - loss: 36.4476 - val_loss: 22.4175\n",
            "Epoch 2/60\n",
            "63/63 [==============================] - 25s 398ms/step - loss: 20.8487 - val_loss: 22.5473\n",
            "Epoch 3/60\n",
            "63/63 [==============================] - 25s 399ms/step - loss: 20.4413 - val_loss: 21.2750\n",
            "Epoch 4/60\n",
            "63/63 [==============================] - 27s 422ms/step - loss: 20.2644 - val_loss: 20.7931\n",
            "Epoch 5/60\n",
            "63/63 [==============================] - 26s 409ms/step - loss: 20.1653 - val_loss: 20.6325\n",
            "Epoch 6/60\n",
            "63/63 [==============================] - 25s 399ms/step - loss: 20.0804 - val_loss: 20.4527\n",
            "Epoch 7/60\n",
            "63/63 [==============================] - 25s 396ms/step - loss: 20.0028 - val_loss: 20.3530\n",
            "Epoch 8/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 19.9109 - val_loss: 20.2881\n",
            "Epoch 9/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 19.8155 - val_loss: 20.1393\n",
            "Epoch 10/60\n",
            "63/63 [==============================] - 25s 396ms/step - loss: 19.7094 - val_loss: 20.0379\n",
            "Epoch 11/60\n",
            "63/63 [==============================] - 25s 397ms/step - loss: 19.5922 - val_loss: 19.8778\n",
            "Epoch 12/60\n",
            "63/63 [==============================] - 25s 398ms/step - loss: 19.4357 - val_loss: 19.7547\n",
            "Epoch 13/60\n",
            "63/63 [==============================] - 25s 397ms/step - loss: 19.2556 - val_loss: 19.6739\n",
            "Epoch 14/60\n",
            "63/63 [==============================] - 25s 395ms/step - loss: 19.0924 - val_loss: 19.4052\n",
            "Epoch 15/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 18.8334 - val_loss: 19.1622\n",
            "Epoch 16/60\n",
            "63/63 [==============================] - 25s 396ms/step - loss: 18.5768 - val_loss: 19.1403\n",
            "Epoch 17/60\n",
            "63/63 [==============================] - 25s 396ms/step - loss: 18.2510 - val_loss: 19.1687\n",
            "Epoch 18/60\n",
            "63/63 [==============================] - 25s 395ms/step - loss: 18.0332 - val_loss: 18.6398\n",
            "Epoch 19/60\n",
            "63/63 [==============================] - 25s 397ms/step - loss: 17.7182 - val_loss: 18.3056\n",
            "Epoch 20/60\n",
            "63/63 [==============================] - 25s 398ms/step - loss: 17.4356 - val_loss: 17.6655\n",
            "Epoch 21/60\n",
            "63/63 [==============================] - 25s 396ms/step - loss: 17.0579 - val_loss: 17.2625\n",
            "Epoch 22/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 16.6769 - val_loss: 17.1168\n",
            "Epoch 23/60\n",
            "63/63 [==============================] - 25s 402ms/step - loss: 16.2924 - val_loss: 16.5821\n",
            "Epoch 24/60\n",
            "63/63 [==============================] - 25s 403ms/step - loss: 15.8735 - val_loss: 16.3504\n",
            "Epoch 25/60\n",
            "63/63 [==============================] - 25s 401ms/step - loss: 15.3885 - val_loss: 15.8821\n",
            "Epoch 26/60\n",
            "63/63 [==============================] - 25s 403ms/step - loss: 14.9287 - val_loss: 15.5363\n",
            "Epoch 27/60\n",
            "63/63 [==============================] - 25s 400ms/step - loss: 14.4028 - val_loss: 14.8958\n",
            "Epoch 28/60\n",
            "63/63 [==============================] - 25s 403ms/step - loss: 13.9388 - val_loss: 14.0807\n",
            "Epoch 29/60\n",
            "63/63 [==============================] - 26s 412ms/step - loss: 13.4223 - val_loss: 13.3927\n",
            "Epoch 30/60\n",
            "63/63 [==============================] - 25s 403ms/step - loss: 12.9241 - val_loss: 13.1801\n",
            "Epoch 31/60\n",
            "63/63 [==============================] - 25s 402ms/step - loss: 12.3708 - val_loss: 14.0930\n",
            "Epoch 32/60\n",
            "63/63 [==============================] - 25s 395ms/step - loss: 11.8248 - val_loss: 16.0674\n",
            "Epoch 33/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 11.2005 - val_loss: 15.6350\n",
            "Epoch 34/60\n",
            "63/63 [==============================] - 25s 391ms/step - loss: 10.4515 - val_loss: 14.8438\n",
            "Epoch 35/60\n",
            "63/63 [==============================] - 25s 393ms/step - loss: 9.8360 - val_loss: 16.1538\n",
            "Epoch 36/60\n",
            "63/63 [==============================] - 25s 392ms/step - loss: 9.2247 - val_loss: 16.5865\n",
            "Epoch 37/60\n",
            "63/63 [==============================] - 25s 398ms/step - loss: 8.6641 - val_loss: 14.7728\n",
            "Epoch 38/60\n",
            "63/63 [==============================] - 25s 398ms/step - loss: 8.1787 - val_loss: 14.0325\n",
            "Epoch 39/60\n",
            "63/63 [==============================] - 25s 398ms/step - loss: 7.7326 - val_loss: 10.6461\n",
            "Epoch 40/60\n",
            "63/63 [==============================] - 25s 400ms/step - loss: 7.3683 - val_loss: 9.8014\n",
            "Epoch 41/60\n",
            "63/63 [==============================] - 25s 399ms/step - loss: 6.9792 - val_loss: 7.5422\n",
            "Epoch 42/60\n",
            "63/63 [==============================] - 25s 400ms/step - loss: 6.7188 - val_loss: 7.7393\n",
            "Epoch 43/60\n",
            "63/63 [==============================] - 25s 401ms/step - loss: 6.4391 - val_loss: 8.3308\n",
            "Epoch 44/60\n",
            "63/63 [==============================] - 25s 395ms/step - loss: 6.2454 - val_loss: 7.4368\n",
            "Epoch 45/60\n",
            "63/63 [==============================] - 25s 397ms/step - loss: 5.9553 - val_loss: 6.1383\n",
            "Epoch 46/60\n",
            "63/63 [==============================] - 25s 399ms/step - loss: 5.7511 - val_loss: 6.1496\n",
            "Epoch 47/60\n",
            "63/63 [==============================] - 25s 396ms/step - loss: 5.5567 - val_loss: 5.8184\n",
            "Epoch 48/60\n",
            "63/63 [==============================] - 25s 393ms/step - loss: 5.3675 - val_loss: 5.6384\n",
            "Epoch 49/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 5.2301 - val_loss: 5.5736\n",
            "Epoch 50/60\n",
            "63/63 [==============================] - 25s 395ms/step - loss: 5.0445 - val_loss: 5.3476\n",
            "Epoch 51/60\n",
            "63/63 [==============================] - 25s 393ms/step - loss: 4.9070 - val_loss: 5.1957\n",
            "Epoch 52/60\n",
            "63/63 [==============================] - 25s 392ms/step - loss: 4.7565 - val_loss: 5.1366\n",
            "Epoch 53/60\n",
            "63/63 [==============================] - 25s 393ms/step - loss: 4.6151 - val_loss: 5.0326\n",
            "Epoch 54/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 4.5277 - val_loss: 4.9612\n",
            "Epoch 55/60\n",
            "63/63 [==============================] - 25s 393ms/step - loss: 4.4063 - val_loss: 4.8638\n",
            "Epoch 56/60\n",
            "63/63 [==============================] - 25s 390ms/step - loss: 4.2737 - val_loss: 4.7652\n",
            "Epoch 57/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 4.1406 - val_loss: 4.7032\n",
            "Epoch 58/60\n",
            "63/63 [==============================] - 25s 392ms/step - loss: 4.0527 - val_loss: 4.6446\n",
            "Epoch 59/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 3.9433 - val_loss: 4.4965\n",
            "Epoch 60/60\n",
            "63/63 [==============================] - 25s 394ms/step - loss: 3.8571 - val_loss: 4.3933\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f332515b390>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ROYUB7oveR4o"
      },
      "source": [
        "##Checking Model Performance on Validation Dataset##"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vv9aHaayeN0f"
      },
      "source": [
        "preds = model.predict(valid_x)\n",
        "decoded = K.get_value(K.ctc_decode(preds, input_length=np.ones(preds.shape[0])*preds.shape[1], \n",
        "                                   greedy=True)[0][0])\n",
        "\n",
        "prediction = []\n",
        "for i in range(valid_size):\n",
        "    prediction.append(num_to_label(decoded[i]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W6Lgi1H_eVgF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a29b025f-9493-41b7-b0ba-65ae460a8502"
      },
      "source": [
        "y_true = valid.loc[0:valid_size, 'IDENTITY']\n",
        "correct_char = 0\n",
        "total_char = 0\n",
        "correct = 0\n",
        "\n",
        "for i in range(valid_size):\n",
        "    pr = prediction[i]\n",
        "    tr = y_true[i]\n",
        "    total_char += len(tr)\n",
        "    \n",
        "    for j in range(min(len(tr), len(pr))):\n",
        "        if tr[j] == pr[j]:\n",
        "            correct_char += 1\n",
        "            \n",
        "    if pr == tr :\n",
        "        correct += 1 \n",
        "    \n",
        "print('Correct characters predicted : %.2f%%' %(correct_char*100/total_char))\n",
        "print('Correct words predicted      : %.2f%%' %(correct*100/valid_size))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correct characters predicted : 64.02%\n",
            "Correct words predicted      : 38.10%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fjssSVuKedQn"
      },
      "source": [
        "##Some Predictions on Test Dataset##"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BNNaD2YSeeLp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 171
        },
        "outputId": "d00560f8-0900-42fe-e73a-9ab21ff1d56e"
      },
      "source": [
        "test = pd.read_csv('/content/drive/MyDrive/input/written_name_test_v2.csv')\n",
        "\n",
        "plt.figure(figsize=(15, 10))\n",
        "for i in range(6):\n",
        "    ax = plt.subplot(2, 3, i+1)\n",
        "    img_dir = '/content/drive/MyDrive/input/test/'+test.loc[i, 'FILENAME']\n",
        "    image = cv2.imread(img_dir, cv2.IMREAD_GRAYSCALE)\n",
        "    plt.imshow(image, cmap='gray')\n",
        "    \n",
        "    image = preprocess(image)\n",
        "    image = image/255.\n",
        "    pred = model.predict(image.reshape(1, 256, 64, 1))\n",
        "    decoded = K.get_value(K.ctc_decode(pred, input_length=np.ones(pred.shape[0])*pred.shape[1], \n",
        "                                       greedy=True)[0][0])\n",
        "    plt.title(num_to_label(decoded[0]), fontsize=12)\n",
        "    plt.axis('off')\n",
        "    \n",
        "plt.subplots_adjust(wspace=0.2, hspace=-0.8)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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+ulrZBARERERER1vjqtgKhwOw+/347XXXsNjjz2G+vp6Y2AsERERERHR8eS4CqYsFgt27tyJl19+GUVFRcZaKmydIiIiIiKi4013s/kRER2vmHkR9U4neg0q8yai3unEmc2PiIiIiIjoeMdgioiIiIiIKAG2Y50AIqIEnehdgYiod2LeRHQSYcsUERERERFRAhhMERERERERJYDBFBERERERUQIYTBERERERESWAwRQREREREVECGEwRERERERElgMEUERERERFRAhhMERERERERJYDBFBERERERUQIYTBERERERESWAwRQREREREWrvCCsAACAASURBVFECGEwRERERERElgMEUERERERFRAhhMERERERERJYDBFBERERERUQIYTBERERERESWAwRQREREREVECGEwRERERERElgMEUERERERFRAhhMERERERERJYDBFBERERERUQIYTBERERERESWAwRQREREREVECGEwRERERERElgMEUERERERFRAhhMERERERERJYDBFBERERERUQIYTBERERERESWAwRQREREREVECGEwRERERERElgMEUERERERFRAhhMERERERERJYDBFBERERERUQIYTBERERERESWAwRQREREREVECGEwRERERERElgMEUERERERFRAhhMERERERERJYDBFBERERERUQIYTBERERERESWAwRQREREREVECGEwRERERERElgMFULyKE+FAI8QMhxC1CiE+jbN8lhJjW+ffzQoifxziOFEK0CSHc2s+/d27LFEIsEkJUCyFahRBbhRBzj+wrI6LjmRDiOiHEF515xQEhxHtCiLOEEI8IIV6Msr8UQgzt/PsRIUTAlN80mfZV+VGVEOK/hRBWbfuHQghv5/Y6IcQbQoi+nduMfE4IUdx5rHdNaXlRCPHIEXpriIiol2MwRbGUSyld2s/8zsefAuACMBxABoDLAWw/VokkomNLCHEfgF8D+AWAAgADADwD4IpDOMyrpvwm07S9XErpAjAFwCwAt5q239O5vQRAJjryqVjOEEJMPIS0ERERxcRgig7VOAAvSykbpZRhKeUWKeXrxzpRRHT0CSEyADwG4G4p5RtSyjYpZUBK+baU8t8O9/mklNsBfAZgTIztDQCWABgV5zDzAcw73GkjIqKTE4MpOlSrAMwTQvyLEGLYsU4MER1TZwJI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\n",
            "text/plain": [
              "<Figure size 1080x720 with 6 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zBexzdwz3xrD"
      },
      "source": [
        "## Output Images similar to Input Image"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WlDh-qcQxC-g"
      },
      "source": [
        "[reference](https://wikidocs.net/24603)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "4tAg9oW_QJBR",
        "outputId": "2283f9d5-eb88-4adc-a940-6c19b771a901"
      },
      "source": [
        "# 이미지를 입력하여 문자 인식\n",
        "\n",
        "idx = 10\n",
        "img_dir = '/content/drive/MyDrive/input/test/'+test.loc[idx, 'FILENAME']\n",
        "image = cv2.imread(img_dir, cv2.IMREAD_GRAYSCALE)\n",
        "plt.imshow(image, cmap='gray')\n",
        "\n",
        "image = preprocess(image)\n",
        "image = image/255.\n",
        "pred = model.predict(image.reshape(1, 256, 64, 1))\n",
        "decoded = K.get_value(K.ctc_decode(pred, input_length=np.ones(pred.shape[0])*pred.shape[1], \n",
        "                                       greedy=True)[0][0])\n",
        "plt.title(num_to_label(decoded[0]), fontsize=12)\n",
        "plt.axis('off')\n",
        "\n",
        "print(test.loc[idx, 'IDENTITY'])   \n",
        "print(num_to_label(decoded[0])) \n",
        "plt.subplots_adjust(wspace=0.2, hspace=-0.8)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GORTCHAKOFF\n",
            "GORTCHAROT\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7eTjESc5R_3v"
      },
      "source": [
        "# text에 인식한 문자 저장 \n",
        "\n",
        "text = num_to_label(decoded[0])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ue_5i9F9ZFiZ"
      },
      "source": [
        "train_copy = train.copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VZgokdIdNfN4"
      },
      "source": [
        "# 문자 벡터화\n",
        "\n",
        "def bin(name):\n",
        "\n",
        "    chars = []\n",
        "\n",
        "    for i in alphabets:\n",
        "        count = 0\n",
        "        for j in name:\n",
        "            if i == j:\n",
        "                count +=1\n",
        "        chars.append(count)\n",
        "\n",
        "    return chars\n",
        "\n",
        "train_copy['bin'] = train_copy['IDENTITY'].apply(lambda x: bin(x)) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "dYtRXLeRTDxM",
        "outputId": "52f7707c-6d43-4b3b-ec96-178adc4d9a46"
      },
      "source": [
        "train_copy"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FILENAME</th>\n",
              "      <th>IDENTITY</th>\n",
              "      <th>bin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>TRAIN_00001.jpg</td>\n",
              "      <td>BALTHAZAR</td>\n",
              "      <td>[3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>TRAIN_00002.jpg</td>\n",
              "      <td>SIMON</td>\n",
              "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>TRAIN_00003.jpg</td>\n",
              "      <td>BENES</td>\n",
              "      <td>[0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>TRAIN_00004.jpg</td>\n",
              "      <td>LA LOVE</td>\n",
              "      <td>[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>TRAIN_00005.jpg</td>\n",
              "      <td>DAPHNE</td>\n",
              "      <td>[1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32929</th>\n",
              "      <td>TRAIN_32997.jpg</td>\n",
              "      <td>LEANE</td>\n",
              "      <td>[1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32930</th>\n",
              "      <td>TRAIN_32998.jpg</td>\n",
              "      <td>DEBONNE</td>\n",
              "      <td>[0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32931</th>\n",
              "      <td>TRAIN_32999.jpg</td>\n",
              "      <td>PAUL</td>\n",
              "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32932</th>\n",
              "      <td>TRAIN_33000.jpg</td>\n",
              "      <td>LOPA</td>\n",
              "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32933</th>\n",
              "      <td>TRAIN_33001.jpg</td>\n",
              "      <td>PETIT</td>\n",
              "      <td>[0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>32934 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "              FILENAME  ...                                                bin\n",
              "0      TRAIN_00001.jpg  ...  [3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, ...\n",
              "1      TRAIN_00002.jpg  ...  [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, ...\n",
              "2      TRAIN_00003.jpg  ...  [0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...\n",
              "3      TRAIN_00004.jpg  ...  [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, ...\n",
              "4      TRAIN_00005.jpg  ...  [1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, ...\n",
              "...                ...  ...                                                ...\n",
              "32929  TRAIN_32997.jpg  ...  [1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, ...\n",
              "32930  TRAIN_32998.jpg  ...  [0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, ...\n",
              "32931  TRAIN_32999.jpg  ...  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, ...\n",
              "32932  TRAIN_33000.jpg  ...  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, ...\n",
              "32933  TRAIN_33001.jpg  ...  [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, ...\n",
              "\n",
              "[32934 rows x 3 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t_4yuquETPMT"
      },
      "source": [
        "text = bin(text)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sBQiPtyZTisR"
      },
      "source": [
        "from numpy import dot \n",
        "from numpy.linalg import norm"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wSr7wqXwTqQy"
      },
      "source": [
        "# 유사도 측정\n",
        "\n",
        "def cos_sim(A, B):\n",
        "       return dot(A, B)/(norm(A)*norm(B))\n",
        "\n",
        "cosine_sim = []\n",
        "for i in range(len(train_copy)):\n",
        "    cosine_sim.append(cos_sim(text, train_copy['bin'][i]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ANo8EvcrltJE"
      },
      "source": [
        "scores = list(enumerate(cosine_sim))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S6bRWdhpmR88",
        "outputId": "8cb77278-f978-44d6-d65f-638d02febf13"
      },
      "source": [
        "scores = sorted(scores, key=lambda x: x[1], reverse=True)\n",
        "scores[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(14301, 0.9185586535436918),\n",
              " (26105, 0.9185586535436918),\n",
              " (29481, 0.9185586535436918),\n",
              " (29713, 0.9013878188659974),\n",
              " (99, 0.8944271909999159),\n",
              " (28615, 0.8944271909999159),\n",
              " (10125, 0.8838834764831843),\n",
              " (19314, 0.8838834764831843),\n",
              " (7206, 0.875),\n",
              " (7271, 0.875)]"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mq8PKHhHnK5q",
        "outputId": "b5064e1f-efac-493d-e2cb-62500b928a1a"
      },
      "source": [
        "indices = [j[0] for j in scores[:6]]\n",
        "indices"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[14301, 26105, 29481, 29713, 99, 28615]"
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EIRa_5_8npMM",
        "outputId": "f119fad6-76e9-4471-dcc9-9adb78278372"
      },
      "source": [
        "train_copy['IDENTITY'].iloc[indices]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14301     HARGOT\n",
              "26105     ROCHAT\n",
              "29481     CHAROT\n",
              "29713    TORTORA\n",
              "99         GAROT\n",
              "28615      RAGOT\n",
              "Name: IDENTITY, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "LzpDYDoMqjIc",
        "outputId": "0c8ee52f-4912-42b0-8ae3-a3907a6cf10a"
      },
      "source": [
        "plt.figure(figsize=(15, 10))\n",
        "for i in range(6):\n",
        "    ax = plt.subplot(2, 3, i+1)\n",
        "    img_dir = '/content/drive/MyDrive/input/train/'+train.loc[indices[i], 'FILENAME']\n",
        "    image = cv2.imread(img_dir, cv2.IMREAD_GRAYSCALE)\n",
        "    plt.imshow(image, cmap='gray')\n",
        "    plt.title(train.loc[indices[i], 'IDENTITY'], fontsize=12)\n",
        "    plt.axis('off')\n",
        "plt.subplots_adjust(wspace=0.2, hspace=-0.8)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x720 with 6 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}